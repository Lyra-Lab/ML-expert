{
  "id": "arxiv_2502.21117v1",
  "text": "1\nDistributed Data Access in Industrial Edge\nNetworks\nTheofanis P. Raptis, Andrea Passarella, Marco Conti\nAbstract—Wireless edge networks in smart industrial en-\nvironments increasingly operate using advanced sensors and\nautonomous machines interacting with each other and generating\nhuge amounts of data. Those huge amounts of data are bound to\nmake data management (e.g., for processing, storing, computing)\na big challenge. Current data management approaches, relying\nprimarily on centralized data storage, might not be able to cope\nwith the scalability and real time requirements of Industry 4.0\nenvironments, while distributed solutions are increasingly being\nexplored. In this paper, we introduce the problem of distributed\ndata access in multi-hop wireless industrial edge deployments,\nwhereby a set of consumer nodes needs to access data stored in\na set of data cache nodes, satisfying the industrial data access\ndelay requirements and at the same time maximizing the network\nlifetime. We prove that the introduced problem is computation-\nally intractable and, after formulating the objective function, we\ndesign a two-step algorithm in order to address it. We use an\nopen testbed with real devices for conducting an experimental\ninvestigation on the performance of the algorithm. Then, we\nprovide two online improvements, so that the data distribution\ncan dynamically change before the first node in the network runs\nout of energy. We compare the performance of the methods via\nsimulations for different numbers of network nodes and data\nconsumers, and we show significant lifetime prolongation and\nincreased energy efficiency when employing the method which\nis using only decentralized low-power wireless communication\ninstead of the method which is using also centralized local area\nwireless communication.\nIndex Terms—Industry 4.0, Data Caching, Internet of Things,\nEnergy Efficiency, Wireless Networks\nI. INTRODUCTION AND MOTIVATION\nI\nN the frame of cyber-physical convergence [1], industrial\nequipment will be more and more saturated with embedded\ndevices generating large amounts of data as the basis for real-\ntime control and operations in factory environments. Recent\ninitiatives such as the “Industry 4.0” in Europe, the “Industrial\nInternet” in United States, the “Manufacturing White Book of\nYear 2014” in Japan, and the “Made in China 2025” in China,\nhave set the foundations for the deployment of large scale\nwireless edge networks as a technical enabler for a variety\nof industrial use cases [2]. Wireless edge networks in smart\nindustrial environments operate using advanced sensors and\ninformation technologies; thus, large amounts of data are gen-\nerated and collected, requiring big data processing technology\nto build an integrated environment in which the automation\nThe authors are with the Institute of Informatics and Telematics, National\nResearch Council, Pisa, Italy.\nThis work was funded by the European Commission through the FoF-\nRIA Project AUTOWARE: Wireless Autonomous, Reliable and Resilient\nProduction Operation Architecture for Cognitive Manufacturing (No. 723909).\nprocess can be represented transparently and controlled and\nmanaged in a more efficient way [3].\nMore and more, in industrial environments, Internet of\nThings (IoT) devices are not seen as “dumb things” generating\nindividually a few bytes, but as small multimedia devices, pos-\nsibly generating data of significant size (e.g., high resolution\npictures or video), still operated via batteries to make them\nmore flexible and cheap to assemble, install and manage [4].\nStandardized protocols, such as WirelessHART and ISA100\nWireless, provide the basis for energy-efficient mesh/multi-\nhop communications, while reducing fading and interference\nimpairments [5]. In this setting, how to process, store, and\nmanage the data efficiently, while at the same time satisfy the\nindustrial requirements, is a great challenge.\nThe role of data in Industry 4.0 wireless networks is\nbecoming more and more important. Industrial applications\ngenerate more and more data, both at each individual node\n(e.g., multimedia IoT devices) and at the entire factory level,\ndue to the increasing number of devices embedded in indus-\ntrial physical components. Moreover, several key Industry 4.0\nautomation applications are enabled by efficient flowing of\ndata across nodes. Therefore, a very important perspective\nis seeing industrial networks as data-centric, and including\nefficient data management as a first class primitive in such\nnetworking environments.\nTraditionally, cloud computing provides us with an oppor-\ntunity to solve the related data-centric problems centrally and\nseamlessly. In many cases, hierarchical clouds or fog comput-\ning tools are also employed for additional functionality [6].\nAlthough there has been considerable work on caching of and\naccessing industrial edge data on the cloud [6], the burden of\ntransferring the data back and forth between local and remote\nlocations has already been demonstrated as excessive for some\nuse cases and prohibiting for others [7]. A representative\nexample is the 5GPPP classification of industrial use cases [8]\nin five families, each of them representing a different subset\nof communication requirements in terms of delay, reliability,\navailability, throughput, etc. In this classification, most of\nthe time critical use cases, such as motion control, control-\nto-control and massive wireless sensor networks, necessitate\nend-to-end data delivery delays ranging from 1 to 100 ms.\nEven some cases of employment of pure edge data distribution\nmethods can effectively lead to sub-optimal performance, such\nas the case of ultra low delay applications [9]. Last but not\nleast, with the increasing number of involved battery-powered\ndevices, industrial edge deployments may consume substantial\namounts of energy; more than needed if local, distributed and\nlow-power computations were used instead. This is due to the\narXiv:2502.21117v1  [cs.NI]  28 Feb 2025\n\n\n2\nfact that low-power wireless communication can be way more\ncostly than local area wireless.\nBecause of that, more and more decentralized solutions\nto data management are explored, whereby centralized con-\ntrollers, cache nodes and also individual, resource-constrained\nsensor motes are exploited to cache data and serve them to\nconsumers on demand. To support this, novel data manage-\nment layers need to be engineered over the device and net-\nworking planes of the industrial deployments [10], [11]. Those\nlayers operate independently from and complement the routing\nprocess, targeting at distributing the data in the network in\na decentralized manner, while at the same time respecting\nthe strict Industry 4.0 requirements. A fundamental operation\nof a data management layer on industrial edge networks is\nthe efficient caching of industrial data in intermediary cache\nnodes which are located between the data source nodes and\nthe data consumer nodes. Typically, the cache nodes are more\npowerful than the resource-constrained edge sensor motes in\nterms of processing, communication and energetic autonomy\ncapabilities.\nThe combination of three elements, namely the industrial\ndevices (edge devices and cache nodes), the industrial edge\ncommunication (wireless, low-power, multi-hop), and the in-\ndustrial requirements (delay constraints, energy restrictions,\nand data pieces in need to be accessed by consumers), uncov-\ners a new computational problem: Find the appropriate cache\nnode for each data piece so that it can be effectively stored\nfor future access by the interested consumers, while respecting\nthe data access delay threshold, and maximizing the network\nlifetime.\nThe fact that renders this specific, realistic problem par-\nticularly interesting for investigation is that, although similar\nproblems have been addressed in the general ICT literature\n(graph theory, operations research, IoT), to the best of our\nknowledge, the exact problem and its formulation, which\nis naturally emerging from the combination of those three\nelements in industrial environments, has not been investigated\nin the past. Specifically, from the theoretic point of view, the\nproblem introduced in this paper presents remote similarities\nwith multi-commodity flow problems [12]. However, the pres-\nence of cache nodes differentiates significantly the network\nstructure and the formulation properties. On a more practical\nbasis, multi-source, multi-destination approaches have also\nbeen studied in the wireless sensor networking and internet\nof things domains [13]. The problems investigated in those\nfields present even more similarities than the theoretic ones,\nas they usually involve lifetime maximization [14] or delay\nconsiderations [15]. Similar to the theoretic case however, the\nnecessity for cache nodes alters fundamentally the network\nmodel and the combination of the specific objective func-\ntion and problem constraints. As far as the pure industrial\nnetworking literature is concerned, the problem presented in\nthis paper is also introduced for the first time. Although most\nrecent approaches, bear some common elements individually\n(lifetime maximization in [16], delay constraints in [17], cache\nnodes in [9]), they focus on different network models and\nproblems. Deeper insights on the specific models and problems\ncan be found in [18], a truly extensive survey for future\nreference and open challenges.\nIn this paper we contribute to fill this gap. Specifically,\nextending our preliminary work presented in [19], we present a\ndistributed, adaptive data access scheme for guaranteeing real-\ntime delay requirements while effectively prolonging network\nlifetime in industrial edge wireless networks. The remainder\nof the paper is organized as follows. In section II, we describe\nthe technological background of the industrial edge networks\nand we sketch the network model abstraction that we use in\nthis paper. In section III, we prove that the distributed data\ncaching problem for industrial edge networks is computation-\nally intractable, and we formulate the objective function on the\nmaximum lifetime, which in our case is the time elapsed until\nthe first node in the network runs out of energy. In section\nIV, we design a two-step algorithmic method for effectively\nprolonging the network lifetime, while respecting the industrial\ndata access delay constraints. We use FIT IoT-LAB open\ntestbed [20] for conducting an experimental investigation. In\norder to demonstrate the efficiency of our method, and due\nto the fact that, to the best of our knowledge, there are\nno related solutions in the literature for the exact problem\nformulation, we compare its performance to the performance\nof an optimal solution of a relaxed formulation (and thus\nmore difficult version) of the problem. Results show a very\ngood accuracy of our solutions in approximating the optimal\nsolution even of the relaxed problem. In section V, we go\none step beyond the strict, constant data distribution schedule\nand we provide two online improvements, so that the data\ndistribution can dynamically change before the first node in\nthe network dies: one centralized method which uses local\narea wireless communication to renew the data distribution\nschedules according to the current network energy map and\none distributed method which periodically rotates the available\ndata distribution paths in a proportionally fair manner. We then\ncompare the performance of all three methods via simulations\nfor different numbers of network nodes and data consumers,\nby using three metrics; network lifetime, energy consumption\nrate and total variation distance. Finally, in section VI, we\nconclude the paper.\nII. INDUSTRIAL EDGE BACKGROUND\nIn this section, we describe the technological background\nof the industrial edge networks and we sketch the network\nmodel abstraction that we use in this paper. The notation used\nthroughout the paper is summarized in Table I.\nIndustrial devices: We consider industrial edge deploy-\nments as shown in Fig. 1. The industrial plant is the center\nof operations and is connected to the industrial field on the\none end and to the external stakeholders on the other end.\nThe industrial plant features a network controller and the\nfield contains the industrial network. The industrial network\ntypically features two types of devices, as shown in Fig. 1:\na large number of resource-constrained sensor and actuator\nnodes (which are equipped with limited processing, storing\nand communication abilities) and a limited number of more\npowerful cache nodes (which can be devices like Raspberry\nPi or TTTech’s MFN 100, or even devices such as Dell or\n\n\n3\nTABLE I: Notation used in the paper\nBasics\nV\n≜\nset of network nodes u\nP\n≜\nset of cache nodes p, with P ⊂V , |P| ≪|V −P|,\nand Ep ≫Eu, ∀u ∈V, p ∈P\n(u, v)\n≜\nwireless link between u, v ∈V\nδ(u, v)\n≜\nEuclidean distance between u, v ∈V\nNu\n≜\nneighborhood of u\nγ\n≜\nneighborhood adjustment parameter\nEu\n≜\nenergy supply of u\nD\n≜\nset of data pieces d\nϵuv\n≜\ndata piece propagation on (u, v) energy cost\nτ\n≜\ntime cycle\nsd\n≜\nsource node of d\ncd\n≜\nconsumer node of d\nrg\nd\n≜\ndata generation rate of d\nrc\nd\n≜\ndata consumption rate of d\nluv\n≜\none hop data propagation delay\nLuv\n≜\nend-to-end data propagation delay\nLmax\n≜\nend-to-end data access delay threshold\nDecision variables\nxcd\nuv\n=\n(\n1,\nif (u, v) is active in path between cd and p\n0,\notherwise\nxsd\nuv\n=\n(\n1,\nif (u, v) is active in path between sd and p\n0,\notherwise\nObjective function\nauv\n≜\nPν\ni=1(rg\ni xsi\nuv + rc\ni xci\nuv), aggregate data rate of\n(u, v)\nx\n≜\n[auv], data rate vector of u\nTu(x)\n≜\nEu\nP\nv∈Nu ϵuvauv , lifetime of u\nT(x)\n≜\nminu∈V\nn\nTu(x) | P\nv∈Nu(xsd\nuv + xcd\nuv) > 0\no\n,\nnetwork lifetime\nIntel IoT gateways or Siemens PLCs). Such types of industrial\nnetworks are particularly related to smart factories [21] and\nindustrial workshop deployments [22].\nIndustrial Communications: As shown in Fig. 1, various\ncommunication and networking technologies co-exist in the\nindustrial edge deployment. Typically, the communication\nbetween the industrial plant and the external stakeholders is\nperformed via an industrial cloud system and relevant services\n(the investigation of data distribution aspects on this part\nof the communications is outside the scope of this paper).\nThe communication between the industrial plant and the field\nnetwork is performed through the central network controller.\nThis part of the communication is implemented using two\nkinds of technologies, wired and wireless. The wired part is\nfacilitating the communication between the central network\ncontroller with the cache nodes (e.g., TSN, HART). The\nwireless part is provided by two technologies: local area radio\nfor the inter-field communication between the edge nodes and\nthe controller (e.g., IEEE 802.11) and low power radio for the\nintra-field communication among the edge nodes (e.g., IEEE\n802.15.4).\nThe network: We are particularly interested in the industrial\nField / Edge   \nConsumer\nSource\nSource\nConsumer \nField  \ndevice\nCache  \nnode\nNetwork  \ncontroller\nIndustrial \nplant \nIndustrial \ncloud \nExternal \nstakeholders \nLow power \nwireless \nLow power \nwireless -  \nadditional  \npaths \nWired  \nconnection \nLocal area \nwireless \nFig. 1: Industrial edge deployment.\nedge network of the field devices and cache nodes, as well as in\nthe associated data which are generated, cached and accessed.\nThe network can be abstracted by a graph G = (V, E)\nwhere every field device (or node) u ∈V has a limited\namount of energy supply Eu. The more powerful (in terms\nof computation, storage and energy supplies) cache nodes are\nrepresented by a set P, with P ⊂V , |P| ≪|V −P|, and\nEp ≫Eu, ∀u ∈V, p ∈P. Cache nodes p ∈P act as local\nmemories in the network and store data originated from the\nsources, for access from the consumers when needed. This\nrelieves the field devices from the burden of storing data they\ngenerate (which might require excessive local storage), and\nhelps meeting delay constraints. A node u ∈V can propa-\ngate data using suitable industrial networking standards (e.g.,\nISA100 Wireless, WirelessHART) to a set of nodes which lie\nin its neighborhood Nu. We assume that transmissions are\nsufficiently reliable and do not cause excessive interference.\nOne way of capturing this assumption is via the formulation\nof Nu. Nu contains the nodes v ∈V for which it holds\nthat γ · ρu ≥δ(u, v), where ρu is the transmission range\nof node u (defined by the output power of the antenna),\nδ(u, v) is the Euclidean distance between u and v, and γ\nis a neighborhood adjustment parameter, calibrated by the\nnetwork operator, with 0 < γ ≤1. Parameter γ is particularly\nuseful in indoor industrial environments where high amounts\nof interference exist [23], and the nodes might need to transmit\nmessages only to other nodes which are located nearby. The\nsets Nu are thus defining the set of edges E of the graph\nG. Each one-hop data propagation from u to v requires an\namount of ϵuv of energy dissipated by u so as to transmit\none data piece (for example, a few bytes) to v. A schedule\nof multiple one-hop data propagations over different nodes in\nthe network is resulting in multi-hop data routing, according\nto the underlying routing protocol. Finally, we also assume\nthe existence of a wireless local area network, whereby all\ndevices can communicate wirelessly with the controller. The\nwireless local area communication, however, is much more\npower hungry and thus more costly, as for example, low-\npower edge wireless links are typically operating at −25 dBm\nwhereas local area wireless links at 15 dBm.\nThe data: The generated data in the network are modeled\n\n\n4\nas a set of data pieces D. Each data piece d ∈D is defined as\nd = (sd, cd, rg\nd, rc\nd), where sd ∈V is the source of data piece\nd, cd ∈V is the consumer of data piece d, and rg\nd, rc\nd are\nthe data generation and consumption rates of d respectively.\nIf the same data of a source, e.g., s1, is requested by more\nthan one consumers, e.g., c1 and c2, we have two distinct data\npieces, D1 = (s1, c1, rg\n1, rc\n1) and D2 = (s2 = s1, c2, rg\n1, rc\n2).\nApplications that fit this data model, e.g., continuous mon-\nitoring, involve data coming from multiple devices and are\nneeded by a single device after asynchronous consumption\nrequests, without necessarily a strictly defined pattern of data\ngeneration and requests (which is why we assume a rate of\ngeneration and consumption). Without loss of generality, we\ndivide time in time cycles τ and we assume that the data\nmay be generated at each source sd and consumed at each\nconsumer cd (according to rates rg\nd, rc\nd) at the beginning of\neach τ. Naturally, being asynchronous, the data generated need\nto be cached temporarily for future requests by consumers.\nThe delay. Each one-hop data propagation from u to v\nresults in a delay luv. We denote as Luv the end-to-end delay\nof the multi-hop data propagation from u to v, where Luv =\nluw +...+lzv, where w ∈Nu and z ∈Nv. A critical aspect in\nthe industrial operation process is the timely data access by the\nconsumers. The industrial requirements impose a maximum\ndata access delay constraint which introduces an end-to-end\ndata access delay threshold Lmax for each consumer. We denote\nas Lpdcd the data access delay of the consumer cd to the data\npiece d, with Lpdcd = lpdw + ... + lzcd, where pd is the cache\nnode which holds d for delivery to cd. In order to meet the\nindustrial requirements, we need to guarantee that, when a\nnew request for a data piece is generated at a consumer, the\ndata piece can be sent from the cache and reach the consumer\nwithin that maximum delay, and consequently, the following\nconstraint must be met:\nLpdcd ≤Lmax, ∀cd ∈V\n(1)\nNote that efficient data access delay is a particularly im-\nportant requirement of future network-based communications\nfor many targeted industrial applications in the concept of\nthe Industry 4.0. Both the WG1 of Plattform Industrie 4.0\n(reference architectures, standards and norms) [24] and the\nExpert Committee 7.2 of ITG (radio systems) [25] set the delay\nrequirements for condition monitoring applications to around\n100 ms. An additional delay threshold could be imposed on\nthe end-to-end data delivery from the source nodes to the\ncorresponding cache nodes, or in other words the data caching\ndelay (Lsdpd). The data caching delay, although not affecting\nthe access delay of the consumers to the cached data, can\naffect the freshness of the cached data. As the freshness of the\ncached data is beyond the scope of this study, for simplicity\nwe assume that Lsdpd can remain unbounded. However, the\nmodeling presented in this paper can be generalized so as to\ninclude also constraints on the data caching delay.\nFollowing this modeling, the data caching process is com-\nprised of two intertwined open issues: find the appropriate\ncache node pd for each d so that it can be effectively stored\nfor future use by cd while respecting the data access delay\nthreshold Lmax, and find an efficient data distribution method\nso that the network maximizes its lifetime.\nIII. THE DISTRIBUTED DATA ACCESS PROBLEM (DDA)\nIn this section, we prove that the distributed data caching\nproblem for industrial edge networks is NP-complete (while\nit is true that similar problems in communication and network\noptimization can be intractable, we did not find any already\nexisting exact problem formulation overlapping with the for-\nmulation that we provide for the problem presented in this\npaper; for this reason, we analytically prove its intractability).\nSuppose that we are given a network G = (V, E), a set of\ncache nodes P deployed in the network, the energy supplies\nEu and energy consumption costs ϵuv for every u, v ∈V , and\na fixed number of ν data pieces. The Distributed Data Access\n(DDA) problem is to find a feasible multi-hop data distribution\nschedule such that at least one p ∈P stores the data for every\nconsumer cd ∈V , the delay constraint Lpdcd ≤Lmax is met\nfor every cd ∈V , and the network lifetime is maximized. We\nconsider as network lifetime the time point when the first field\nnode in the network runs out of the sufficient energy supplies\nneeded for proper operation, which is a typical measure of\nnetwork lifetime in the networking literature [26].\nA. Computational intractability of the problem\nIn order to demonstrate that DDA is a difficult problem to\nsolve, we formulate it as a decision problem, i.e., one where\nwe check the existence of a feasible allocation (which can be\nposed as a yes-no question of the input values). We then show\nthat even the decision version is computationally intractable;\nthis result gives us leverage on designing efficient algorithms\nfor the computation version of the problem. The decision\nversion of the problem introduces parameter T, which is a time\nvalue, and poses the following question: can we solve DDA and\nno node in the network runs out of energy before time T? Note\nthat T is used for the proof on NP-completeness, and will be\nomitted in the formulation of the computation version, as the\nproblem will be turned into a maximization of the time until\nthe first node dies. We show that the general version of the\nDDA is NP-complete.\nTheorem 1. The decision version of the DDA problem is NP-\ncomplete.\nProof. We first note that, given a certain data distribution\nschedule, we can verify whether this schedule is sufficient so\nthat no node dies, i.e., no node u spends exactly Eu energy\nfor propagating data before time T. In particular, this can\nbe done in O(νV ) time, by summing the energy spent on\nevery node in the network for every data piece generated and\ndistributed until time T. Therefore, we have that DDA ∈NP.\nFor the hardness part we use the Directed Two Commodity\nIntegral Flow problem [27, p. 216], D2CIF in short. Let\nG(V, A), s1, s2, t1, t2, c(a) = 1, ∀a ∈A, R1, R2 be the input\nof D2CIF. We now transform this into an input for DDA\nas follows: We set the energies needed for the transmission\nof a data piece ϵuv = ϵ · c(u, v)\nc(a)=1,∀a∈A\n=\nϵ, the delays\nrequired for the one-hop data propagations of a data piece\n\n\n5\nv\nu\nw\n1\n1\n1\n(a) D2CIF graph\nv\nu′\nu\nw\nu′′\nϵ\nϵ\nϵ\nϵ\nϵ\nEu = 2ϵ\nEu′ = ϵ\nEu′′ = ϵ\nEw = ϵ\n(b) DDA node insertion.\nFig. 2: Toy example of a graph transformation in DDA.\nluv = l, ∀u, v ∈V and the initial energy supplies of the\nnodes in the network Eu = P\nv∈Nu ϵuv, ∀u, v ∈V . Then,\nwe modify G in order to take into account the edge capacities\nof D2CIF as follows: For every u ∈V with Eu > ϵ, we\n“break” the edge (u, v) and we insert an additional node u′\nwith Eu′ = ϵ, as shown in Fig. 2, thus replacing edge (u, v)\nwith two new edges, (u, u′) and (u′, v), with energies needed\nfor transmission of a data piece ϵuu′ = ϵu′v = ϵ. We set the\nnumber of data pieces ν = d1 + d2 with d1 = R1 data pieces\n(s1, c1, 1, 1) and d2 = R2 data pieces (s2, c2, 1, 1). We set\nci = pi = ti and Lmax < minu∈Nci lciu, ∀i ∈{1, 2}. Finally,\nassuming that the data are generated at the beginning of each\ntime cycle τ, we set T = τ. In order to reassure that the\ndata pieces of cycle τ have been delivered before the start of\ncycle τ + 1, τ has to be sufficiently long. For this reason we\nset τ = l · |E|. Notice that an answer to this instance of the\nDDA problem would provide an answer also to D2CIF, which\nmeans that D2CIF ≤m DDA. This completes the proof.\nB. The objective function on the maximum lifetime\nIn order to formalize the computation version of the prob-\nlem, we need to define the target objective function, which is\nthe maximization of the network lifetime. In order to construct\nthe objective function, we build on top of existing typical\nsensor networking formulations like the ones presented in [28]\nand [29]. We introduce the variables, xcd\nuv and xsd\nuv which hold\nthe necessary information regarding the distribution of the data\npieces across the edges of the graph G. More specifically,\nxcd\nuv = 1 when edge (u, v) is activated for data piece d along\nan edge of a path between consumer cd and the corresponding\ncache node p. On the contrary, xcd\nuv = 0 when edge (u, v)\nis inactive for the transmission of data piece d. Similarly,\nxsd\nuv = 1 when edge (u, v) is activated for data piece d along\nan edge of a path between source sd and the corresponding\ncache node p and xsd\nuv = 0 when edge (u, v) is inactive. We\ndenote as auv = Pν\ni=1(rg\ni xsi\nuv +rc\ni xci\nuv) the aggregate data rate\nof (u, v) for all ν data pieces. Stacking all auv together, we\nget x = [auv], the data rate vector of node u for every v ∈Nu.\nFollowing this formulation, and recalling that every one-hop\ndata piece propagation on (u, v) costs ϵuv, the lifetime of node\nu ∈V can be defined as\nTu(x) =\nEu\nP\nv∈Nu ϵuvauv\n(2)\nand the network lifetime which is also the objective function\nof the problem as\nT(x) = min\nu∈V\n(\nTu(x) |\nX\nv∈Nu\n(xsd\nuv + xcd\nuv) > 0\n)\n.\n(3)\nIV. A CENTRALIZED ALGORITHM FOR SOLVING THE DDA\nPROBLEM\nDue to the NP-completeness and the inherent, proven\nintractability of the problem, optimal solutions which run\nin polynomial time are not attainable. For this reason, in\nthis paper we followed the approach of designing a highly\nefficient method which sufficiently approximates the theo-\nretically optimal performance, and of realistically validating\nits performance through experiments with field devices and\nsimulations. Specifically, we design an algorithmic method for\nsolving the computation version of the DDA problem; in other\nwords, a method which approximates the network lifetime as\ndefined by equation 3, while respecting the data access delay\nconstraint of equation 1. The method is divided in two steps.\nIn the first step, for each data piece, we compute a set of\ndata distribution paths in the network which satisfy the delay\nconstraint and in the second step we configure the variables\nxcd\nuv and xsd\nuv appropriately, by selecting the best paths of the\nfirst step, so as to prolong the network lifetime.\nA. Computing sets of paths with acceptable delay\nThe first step of the method is algorithm 1, which we call\nComputePathSets algorithm (or CPS in short). The output\nof this algorithm is two sets of paths for each data piece d ∈D.\nSpecifically, the first path set, denoted as Ωpcd, includes the\nk shortest data propagation paths (where k is a predefined\nconstant - this is a choice that reduces the number of hops,\nthus limiting the total number of flows insisting on any given\nlink) between each cache node p and each consumer cd, while\nat the same time respecting the data access delay constraint.\nThe second path set, denoted as Ωpsd, includes the k-shortest\npaths between each cache node p and each producer sd.\nThe CPS algorithm works as follows. In the beginning\n(line 1), the algorithm runs an initialization phase, in which\nit assigns a value to the l(h) variable, which represents an\naccurate estimation of the one-hop delay values in the network.\nIn order to derive an appropriate value for l(h), the network\ncontroller measures different one-hop data propagation delays\nwithin the industrial edge deployment, and gathers a suffi-\nciently representative dataset of luv delay measurements from\ndifferent pairs of nodes u, v ∈V . The algorithm selects the\nhighest measured value for assignment to l(h) (or, in other\nwords, the worst-case one-hop delay). The worst-case delay on\neach link could alternatively be stored, and use those values\nto compute the expected delay on the paths, improving the\naccuracy of the algorithm, without changing the computational\ncomplexity of the algorithm. Then (lines 2-3), for each data\npiece d ∈D, the algorithm examines each cache node p ∈P\nand finds the set Ωpcd of the k-shortest paths between p and\nthe consumer cd (line 4), and the set Ωpsd of the k-shortest\npaths between p and the source sd (line 5), in terms of data\naccess delays Lpdcd and Lsdpd. Note that the k-shortest paths\ncan be found using well-known algorithms [30], [31], and that\nin the case of the path between p and cd (line 4), the algorithm\nexcludes the paths resulting in a delay more than Lmax, thus\nguaranteeing the constraint imposed by equation 1. The time\ncomplexity of CPS algorithm is dependent on the algorithm\n\n\n6\nAlgorithm 1: ComputePathSets\n1 l(h): assign value through initialization phase\nInput : G, P, D, l(h), Lmax, k\n2 foreach d ∈D do\n3\nforeach p ∈P do\n4\nΩpcd\n[30], [31]\n=\nn\nΩ(1)\npcd, ..., Ω(k)\npcd\no\n\\\nn\nΩ(j)\npcd | l(h) · |Ω(j)\npcd| > Lmax, ∀j : 1 ≤j ≤k\no\n,\n∀cd ∈V\n5\nΩpsd\n[30], [31]\n=\nn\nΩ(1)\npsd, ..., Ω(k)\npsd\no\n, ∀sd ∈V\nOutput: Ωpcd, Ωpsd\nused for computing the k-shortest paths (lines 4-5). In the\ncase where we use Yen’s algorithm [31], we have a pseudo-\npolynomial time complexity of O(dp(kn(m + n log n))),\nwhere n = |V |, m = |E|, p = |P|, d = |D|.\nB. Enabling data caching for lifetime prolongation\nAfter running CPS algorithm, the network controller is\naware of the delay bounded data distribution options for\neach data piece. The second step of the method is algorithm\n2, which we call DataCacheAccess (or DCA in short).\nThe rationale behind DCA is to prioritize the distribution of\nthe more frequently requested data pieces, due to the fact\nthat they will require more data propagations in the network\nand consequently will use more energy. The output of this\nalgorithm is the exact configuration of variables xcd\nuv, xsd\nuv,\nwhich in turn regulates the data distribution and caching\nprocess in the network.\nThe DCA algorithm works as follows. In the beginning (line\n1), it sorts the set D which contains the data pieces, according\nto their data consumption rate, resulting in the totally ordered\nset (D, ≤). Then (line 2), starting from the data piece which\nnecessitates the highest paths activation rate, and for each\ndata piece d, it computes which are the paths that guarantee\nthe longest lifetime, both for the caching process between\nsd and a potential p, and for the data access between the\nsame p and cd (lines 4-10). This is achieved by examining for\neach data cache p (line 4) all the available path combinations\nbetween the different paths provided in the two output sets\nof CPS algorithm, Ωpcd, Ωpsd (line 7), and by checking for\neach path combination, the resulting lifetime Tu(x), for each\nu included in the paths. Finally, DCA configures appropriately\nthe variables xsd\nuv and xcd\nuv, and updates the new lifetime values\nfor every u included in the selected paths, so that the paths for\nthe next data piece d can be computed given the new network\nlifetime value. The time complexity of DCA is O(dpk2) for\neach path, where p = |P|, d = |D|.\nC. An optimal benchmark\nIn order to demonstrate the performance of our algorithm,\nwe would ideally prefer a benchmark optimization technique\nwhich could optimally solve the problem. However, due to\nthe fact that DDA is an NP-complete problem (Theorem\nAlgorithm 2: DataCacheAccess\nInput : P, D, Eu, ϵuv, Ωpcd, Ωpsd\n1 (D, ≤) : ordered D from highest to lowest rc\nd\n2 for d = (D, ≤)[1] : 1 : (D, ≤)[|D|] do\n3\nmaxlife = 0\n4\nforeach p ∈P with Ωpcd ̸= ∅and Ωpsd ̸= ∅do\n5\nfor i = 1 : 1 : k do\n6\nfor j = 1 : 1 : k do\n7\nif Tu(x) > maxlife, ∀u ∈Ω(i)\npsd ∪Ω(j)\npcd\nthen\n8\nΠsd = Ω(i)\npsd\n9\nΠcd = Ω(j)\npcd\n10\nmaxlife = T(x)\n11\nxsd\nuv = 1, ∀(u, v) ∈Πsd\n12\nupdate(Tu(x)), ∀u ∈Πsd\n13\nxcd\nuv = 1, ∀(u, v) ∈Πcd\n14\nupdate(Tu(x)), ∀u ∈Πcd\nOutput: xcd\nuv, xsd\nuv\n15 activate(xcd\nuv, xsd\nuv)\n1), we are unable to provide such a solution. In order to\novercome this issue, we provide a technique that is able to\nsolve a relaxed formulation of the DDA problem. We use the\nperformance of this technique as a benchmark, in order to have\na performance upper bound for DDA. The technique employed\nis the formulation of the relaxed version of the problem as\nan integer program without considering the delay constraint,\nand a further relaxation which enables the ability to distribute\na single data piece through multiple edges, rendering the\nsolution into a solvable linear program. The integer program\ncan be formulated as follows. Note that the integer constraints\nenforce the variables in the optimization problem to take on\nonly integer values.\nThe objective function (4) remains the same with the one de-\nfined in equation 3, which is the maximization of the time until\nthe first node in the network depletes its energy. Constraints (5-\n9) guarantee the data flow conservation for all nodes, including\nthe data producers and consumers. Constraints (10) guarantee\nthat the energy consumption of each node u will not exceed the\ninitially available energy value Eu. Constraints (11) guarantee\nthat each data piece is propagated from u through one and only\none edge (u, v). However, although the variables xsi\nuv and xci\nuv\nare initially set to be integers, according to the formulation of\nsection III-B, in order to be able to provide a feasible solution\nfor this integer program, we consider a further simplification,\nthe linear relaxation of the program, by enforcing the weaker\nconstraints xsi\nuv, xci\nuv ∈[0, 1] (12). This relaxation leads to a\nlinear multi-commodity flow problem with fractional flows,\nwhich in our case means that an arbitrary fraction of the data\npiece is sent through edge (u, v) and thus a data piece can\nbe broken in smaller pieces of any fractional size, and sent\nacross multiple links. This fact does not allow us to evaluate its\nperformance in real settings, but only in simulations, however,\nin all cases, the performance of the linear program solution is\n\n\n7\nat least as good as the performance of a solution for the integer\nprogram, because any integer program solution would also be\na valid linear program solution. Note that if we want to ensure\nthat at least one cache node is included at the distribution of\nthe data pieces, we can impose an additional set of constraints\nwhich ensure that P\np∈P xci\npv ≥1, ∀i.\nmaximize: T(x)\n(4)\nsubject to:\nX\nv∈V\n(xsi\nuv + xci\nuv −xsi\nvu −xci\nvu) = 0\n∀u ∈V \\ {si, ci} (5)\nX\nv∈V\n(xsi\nsiv −xsi\nvsi) = 1\n∀si ∈V\n(6)\nX\nv∈V\n(xci\nsiv −xci\nvsi) = 0\n∀si ∈V\n(7)\nX\nv∈V\n(xci\nciv −xci\nvci) = −1\n∀ci ∈V\n(8)\nX\nv∈V\n(xsi\nciv −xsi\nvci) = 0\n∀ci ∈V\n(9)\nX\nv∈V\nX\ni\nϵuv(rg\ni xsi\nuv + rc\ni xci\nuv) ≤Eu\n∀u ∈V (10)\nX\nv∈V\nxsi\nuv ≤1,\nX\nv∈V\nxci\nuv ≤1\n∀u ∈V, ∀i (11)\nxsi\nuv, xci\nuv ∈[0, 1]\n∀u, v ∈V, ∀i (12)\nD. Experimental evaluation of the algorithm\nIn order to demonstrate the performance of the algorithm\nin an environment with real devices, as well as to validate\nthe simulation model that we developed for the larger scale\nexperiments (presented later, at section V-C), we conduct an\nexperimental implementation and evaluation. For the purposes\nof the experiments, we used the Euratech testbed of FIT IoT-\nLAB platform situated in Lille, France. IoT-LAB is a large-\nscale collection of open wireless IoT testbeds, operated by\nthe French CNRS and INRIA research institutions [20]. For\nacquiring the results of the linear program and the performance\nupper bound, we used the Matlab linprog solver. Among\nall supported operating systems (e.g., TinyOS, OpenWSN,\nContiki), we conducted our implementation on TinyOS. The\ndetails of the experimental setup are exposed in table II.\nTopology. The Euratech testbed was deployed in the Inria\nLille - Nord Europe showroom and 224 nodes were deployed\nas follows: two horizontal layers in grid formation of 5 × 19\nnodes each and 34 nodes attached to a wall, at a distance of\n0.60 m to each other. Fig. 3a displays a photo of the testbed.\nDue to the fact that this is a dense deployment, and in order to\nacquire a realistic indoor industrial topology we reserved 18 of\nthe testbed’s nodes (purple dots in Fig. 3c); a selection which\nresults in a sparser topology with node distances of 1.2 −1.7\nm. Moreover, we observe that even if this topology is sparser,\nthe resulting multi-hop network can still be considered dense,\ndepending on the output power level of the nodes. Therefore,\nafter having investigated various output power levels (Fig. 4a),\nwe targeted a transmission power of 3 m, with γ = 0.6, which\nTABLE II: Experimental parameters.\nParameter\nValue\nTopology\ndeployment dimensions (2D grid)\n2.4 m × 6.0 m\nnumber of nodes |V |, edges |E|, caches |P|\n18, 47, 4\nnode distances δ(u, v)\n1.2 −1.7 m\ntransmission range ρu, parameter γ\n3 m, 0.6\nneighborhood Nu\nv, with δ(u, v) ≤2 m\nHardware\nMCU (ultra low-power)\nMSP430\nantenna (IEEE 802.15.4)\nCC2420\nmax. battery capacity\n830 mAh, 3.7 V\nnode energies Eu, cache energies Ep\n0 −1, 3 Wh\ntransmission power\n−25 dBm\nTime\ntime cycle τ\n1 sec\ndelay threshold Lmax\n120 ms\nmax. measured one-hop delay l(h)\n28 ms\nexperiment duration\n20 min\nData\npercentage of consumers cd\n0.05 −45%\ngeneration/consumption rates rg\nd, rc\nd\n1 −8 d/sec\ndata piece size (incl. headers and CRC)\n9 bytes\nin turn results to a neighborhood with 5 neighboring nodes on\naverage, where v ∈Nu when δ(u, v) ≤2. We selected 4\nnodes at random to act as cache nodes in the network (so as\nto maintain the modeling assumption |P| ≪|V −P|). Given\nthis configuration, we obtain a topology which is depicted in\nFig. 3d.\nHardware. For the experiments we use the WSN430 open\nnodes, the design of which is displayed in Fig. 3b. The\nWSN430 open node is a mote based on a low power MSP430-\nbased platform, with a set of standard sensors and IEEE\n802.15.4 radio interface at 2.4 GHz, using a CC2420 antenna\n[32]. We configured the antenna TX power at −25 dBm and,\naccording to the CC2420 antenna datasheet [32], we acquire\nthe preferred range ρu = 3 m. The nodes are battery operated\nwith maximum capacity of 830 mAh at 3.7 V. We equip the\nnodes with 0−1 Wh and the cache nodes with 3 Wh of energy.\nTime. In order to perform the experiments in the most realis-\ntic way, we align the Lmax value with the official requirements\nof future network-based communications for Industry 4.0, for\nthe targeted industrial applications. Both the WG1 of Plattform\nIndustrie 4.0 (reference architectures, standards and norms)\n[24] and the Expert Committee 7.2 of ITG (radio systems)\n[25] set the delay requirements for condition monitoring\napplications to around 100 ms, so we set the data access delay\nthreshold to Lmax = 120 ms. We set the time cycle τ = 1\nsec and we assigned l(h) = 28 ms after the initialization\nphase, as explained in the next subsection. Although the\nexperiments duration was set to 20 minutes (which is a very\nshort period to demonstrate the industrial operation effects on\nthe network lifetime) due to resource sharing restrictions with\nother users of the FIT IoT-LAB platform, we extended our\nresults to longer periods of time, based on the measurements\nwe obtained.\nData. We variate the percentage of data sources and con-\nsumers between the values of 0.05−45% on the network nodes\nnumber, with diverse data piece generation and consumption\nrates of rg\nd and rc\nd between 1 and 8 d/sec. The data piece\nsize was set to 9 bytes, which corresponds to all necessary\n\n\n8\n(a) Euratech testbed.\n(b) WSN430 open node.\n(c) Nodes reservation.\n(d) Network topology.\nFig. 3: Experimental setup.\ninformation for routing and application operations (nodeID,\nsensed values, etc.).\nE. Experimental results\nInitialization phase. We ran the initialization phase of CPS\n(algorithm 1), so as to assign values to l(h), by measuring\ntimes that are needed for propagating a data piece. In order\nto obtain reliable results, we repeated the propagation mea-\nsurements multiple times for all 18 nodes, for different pairs\nof transmitting and receiving nodes of Euratech testbed. We\nconcluded to the measurements that are shown in the Fig. 4b\n(mean and maximum values), after measuring the relevant\ndelays using WSN430 with CC2420 and TinyOS. We can see\nthat the delay values of data propagation from one node to\nanother significantly vary. While the mean delays are 17 −19\nms, the maximum propagation delays observed are 22−28 ms.\nIn order to provide maximum delay guarantees with respect\nto Lmax, we assign to l(h) the maximum value observed in the\nexperiments, l(h) = 28 ms.\nNetwork lifetime. In order to experimentally demonstrate\nthe quantitative approximation of the performance of DCA\n(algorithm 2) to the optimal performance, we ran the DCA\ndefined data distribution in the network for increasing number\nof consumers (cd = 1 −8) and for increasing data piece\ngeneration and consumption rates (rg\nd, rc\nd = 1 −8 d/sec), and\nwe compared the results to the performance of the theoretically\noptimal solution, i.e., the solution of the relaxed problem\nshown in section IV-C. The comparison is shown in Fig. 5a.\nWe can see that DCA approximates the performance of the\noptimal solution with a difference of 70 −300 hours in terms\nof network lifetime. Considering the many relaxations that\nthe optimal solution assumes (see Section IV-C), this is a\nremarkably good result (the optimal solution is computed over\nmuch milder constraints, and therefore it is more a computable\nbenchmark than an optimal solution).\nData access delay. Fig. 5b depicts the data access delay\nachieved by each one of the consumers in the network. We\nmeasured the delays asynchronously by individual requests of\nthe consumers to the corresponding cache nodes which cached\ntheir data. We can see that the delay values lie below the\ndata access delay threshold (red line in Fig. 5b). Note that\nTransmission power (dBm)\n-25\n-15\n-10\n-7\n-5\n-3\nNumber of neighbors\n2\n4\n6\n8\n10\n12\n14\n16\n18\n(a) Average size of Nu for differ-\nent TX power levels and γ = 0.6.\nNode ID\n1 2 3 4 5 6 7 8 9 101112131415161718\nOne-hop latency (ms)\n14\n16\n18\n20\n22\n24\n26\n28\nMean value\nMaximum value\n(b) Mean and maximum one-hop\ndelay measurements.\nFig. 4: Initialization measurements.\nthe consumer requesting data piece 2 has a longer access time\nbecause its position in the network is farther from a cache\nnode, compared to the positions of the rest of the nodes.\nEnergy balance. For the DCA case, we measured the energy\ndissipated on each individual node, in order to get an indication\nabout the energy consumption balance over the network. More\nspecifically, we present graphically the spatial evolution of\nenergy consumption in the network. Nodes with high energy\nconsumption are depicted with dark colors. In contrast, nodes\nwith low energy consumption are depicted with bright colors.\nAs exposed in Fig. 5c, DCA achieves a balanced energy\nconsumption over the network, having chosen to move data\nthrough the nodes with high initial energy supplies. The reason\nwhy there is a significantly darker node in the center is\nbecause, as shown in Fig. 3d, it is a central cache node\nnode with 8 edges which serves a lot of requests, and lies\non numerous paths when |D| = 8.\nValidation of the simulation model. In order to obtain some\nconclusions regarding the performance in a larger scale of\nthe methods presented in this paper, we developed a sim-\nulation environment in Matlab, modeled and based on the\nreal world parameters of the wireless edge network. The\nsimulation environment is an implementation of the model\npresented in section II, and was tested and validated against the\nexperimental results, under the same network parameters (table\nII), as shown in Fig. 5a (green line). We can see that the results\nobtained from the simulations approximate in a satisfying way\nthe results obtained by the experiments. The simulation curve\nis naturally smoother than the experimental curve, due to the\nfact that in real world experiments various phenomena can\nvariate the behavioral characteristics of wireless communica-\ntion. The results of Fig. 5a also validate the fact that, for the\nconsidered scenario where the network is carefully deployed,\nthe graph modeling assumptions of section II are a fairly good\nchoice (the abstraction of a wireless network as a graph is\ndebatable, mainly as the links between the nodes can be quite\ndynamic. This has been largely debated in community and as\na result, stochastic geometric models have gained quite a bit\nof popularity. However, for the considered scenario where the\nnetwork is carefully deployed this assumption is a fairly good\none).\n\n\n9\n1\n2\n3\n4\n5\n6\n7\n8\nNumber of data pieces\n0\n200\n400\n600\n800\n1000\nNetwork lifetime (hours)\nOPT\nDCA\nsim. model\n(a) Network lifetime.\n1\n2\n3\n4\n5\n6\n7\n8\nData piece ID\n0\n20\n40\n60\n80\n100\n120\nData access latency (ms)\n(b) DCA data access delay.\n(c) PDD energy balance, d = 8.\nFig. 5: Experimental results.\nV. DYNAMIC PATH RECONFIGURATION ALGORITHMS\nWe now go one step beyond the strict, constant data dis-\ntribution schedule and we provide two online improvements,\nso that the data distribution can dynamically change before\nthe first node in the network dies: one centralized method\nwhich uses local area wireless communication to renew the\ndata distribution schedules according to the current network\nenergy map and one distributed method which periodically\nrotates the available data distribution paths in a proportionally\nfair manner. While the first one can optimize paths based on\nglobal knowledge, this comes at the cost of additional energy\ncost for transmission of field nodes status via the local area\nnetwork. So, it is not immediate to anticipate which solution\nwould be the best one.\nA. A centralized improvement using local area wireless\nThe first improvement is algorithm 3 and is called\nDataCacheAccess+ (or DCA+ in short). The idea behind\nthis algorithm is that, instead of running the same data\ndistribution schedule (calculated by DCA) until the first node in\nthe network dies, we periodically rerun DCA with a preselected\nperiod of ατ and apply the new data distribution schedule. This\nprocess will keep the network updated at the beginning of each\nnew period with a new, efficient data distribution schedule,\nbased on the latest network energy map. However, this update\ncomes at a cost, since the update for all network nodes is\nperformed via local area wireless communication of the edge\nnodes to the controller; a way of communication which is\nmuch more power hungry than the low-power wireless used\nin the field (e.g., 15 dBm for IEEE 802.11 [33] instead of −25\ndBm for IEEE 802.15.4 [32]).\nDCA+ works as follows: The algorithm repeats the following\nprocess until the first node in the network dies (lines 1-\n9). The network controller runs DCA and calculates the data\ndistribution schedule according to the current energy map\nof the network (line 2). Then a timer starts counting (line\n3), and until the timer reaches the value ατ (line 4), the\nAlgorithm 3: DataCacheAccess+\nInput : P, D, Eu, ϵuv, Ωpcd, Ωpsd, α\n1 repeat\n2\nrun\nDataCacheAccess(P, D, Eu, ϵuv, Ωpcd, Ωpsd)\n3\nstart timer\n4\nwhile timer < ατ do\n5\nactivate(xcd\nuv, xsd\nuv)\n6\ndeactivate(xcd\nuv, xsd\nuv)\n7\nforeach u ∈V do\n8\nsend energy status (Eu) to network controller\nvia local area wireless communication\n9 until ∃u ∈V with Eu = 0\nnetwork is activating the edges provided by the calculated\ndata distribution schedule (line 5). After this time point, the\nedges get deactivated (line 6) and each node in the network\ncommunicates its energy status to the network controller via\nlocal area wireless (line 7-8). Then the repeating loop starts\nover again.\nB. A distributed improvement using online path rotation\nThe centralized nature of DCA+, as well as the frequent use\nof local area wireless communication, leads to an important\ndisadvantage. The data distribution schedule recomputation\nnecessitates additional, significant communication overhead,\nso that the field devices inform the network controller about\ntheir current energy status. This is performed through the local\narea wireless links, which are significantly more costly than\nthe low power wireless links (Fig. 1), especially in the case\nof large scale networks, in which many nodes are involved. In\norder to overcome this issue, we design the distributed algo-\nrithm 4, which we call ProportionallyFairRotation\n(PFR in short). PFR acts as a local improvement technique\nfor each data piece, by using all the available paths that\nCPS has computed, thus solely using low-power wireless\ncommunication. The intuition behind PFR is that, for each data\npiece, all available paths are proportionally rotated according\nto the initial energy supplies of the node with the least\nenergy in each path. Therefore, PFR is trying to achieve an\nenergetically balanced rotation of all the available paths of\neach data piece, in order to avoid early node energy depletions.\nPFR works as follows for each individual data piece d ∈D:\nAt first it performs a preprocessing step, by creating a matrix\nincluding all paths computed by CPS (line 2), by storing for\neach path the initial energy level Ed(i, j) of the node with\nthe smallest initial energy supplies (line 3), and by holding\nas reference value the maximum energy level εd of the all\nminimum energy values (line 4). The algorithm repeats the\nfollowing process until the first node in the network dies (lines\n6-15). A local timer starts counting (line 7) in parallel for\neach data piece in a proportionally fair way, in the sense that\nthe timer duration lasts for an amount of time proportional\nto the path’s least energy ratio to the maximum value εd of\nthe minimum values of all paths assigned to d (line 9). The\n\n\n10\nAlgorithm 4: ProportionallyFairRotation\nInput : Eu, Ωpcd, Ωpsd\n1 foreach d ∈D do\n2\nΠd =\n\n\n\n\n\n\nΩ(1)\n1cd ∪Ω(1)\n1sd\nΩ(2)\n1cd ∪Ω(2)\n1sd\n· · ·\nΩ(k)\n1cd ∪Ω(k)\n1sd\nΩ(1)\n2cd ∪Ω(1)\n2sd\nΩ(2)\n2cd ∪Ω(2)\n2sd\n· · ·\nΩ(k)\n2cd ∪Ω(k)\n2sd\n...\n...\n...\n...\nΩ(1)\npcd ∪Ω(1)\npsd\nΩ(2)\npcd ∪Ω(2)\npsd\n· · ·\nΩ(k)\npcd ∪Ω(k)\npsd\n\n\n\n\n\n\n3\nEd(i, j) = minu∈Ω(i)\njcd∪Ω(i)\njsd Eu\n4\nεd = max1≤i≤k,1≤j≤p Ed(i, j)\nOutput: Πd, Ed, εd\n5 i = j = 1\n6 repeat\n7\nstart timerd\n8\nforeach d ∈D do [in parallel]\n9\nwhile timerd < Ed(i,j)\nεd\nατ do\n10\nactivate(xcd\nuv, xsd\nuv ∈Πd(i, j))\n11\ndeactivate(xcd\nuv, xsd\nuv)\n12\nj + +\n13\nif j > k then i + +, j = 1\n14\nif i > p then i = 1, j = 1\n15 until ∃u ∈V with Eu = 0\nvalue of εd will serve as the reference value so as to derive the\nduration of the rotation timer. The timer formulation imposes a\nperiodicity on each path of a fraction of ατ (0 < Ed(i,j)\nεd\n≤1).\nAs long as the timer is active, the network is activating the\nedges of the current data distribution path (line 10). After\nthis time point, the edges get deactivated (line 11) and the\ndata piece starts getting distributed by the next path. Then\nthe repeating loop starts over again. The next path is selected\nserially from the matrix Πd, by exhausting all the k paths\nthe given cache node and then moving to the next cache node\n(lines 13-14). Although this is a serial process based on the\nposition of the paths in matrix Πd, there is no provisioning for\nthe positioning and the selection of the first path to be chosen\nand thus the overall path selection is a random process. There\nis no guarantee for maintaining nodes in the network alive.\nConsequently, a node might run out of energy at any given\ntime, and at this point we measure the lifetime (line 15). While,\nin general, we expect that distributed solutions like PFR can\nbe more energy efficient than centralized solutions (distributed\napproaches use energetically cheaper wireless technologies),\nin our case, the extent of those energy gains is not a straight-\nforward guess. For this reason, he highlight and demonstrate\nthe performance of PFR against the performance of DCA and\nDCA+.\nC. Simulations and comparison\nWe compare via simulations the performance of DCA, DCA+\nand PFR. The use of simulations instead of field experiments\nallow us to be more flexible that in the experimental case,\nand explore larger scale scenaria and different parameter\nvalues (we have shown in section IV-D that our simulation\nmodel nicely approximates experimental results). The intuition\nbehind the simulations is to maintain the testbed experimental\nfeatures, but to variate several parameters that were difficult\nto handle in the testbed experiments. Therefore, we main-\ntain a grid topology for the performance valuation purposes,\nhowever, in order to obtain additional results, we variate the\nsize of the topology with increasing numbers of nodes and\nincreasing numbers of consumers. Specifically, we compare\nthe methods on (square) grid network topologies of different\nsizes, for 25, 36, 49 and 64 numbers of nodes. We focus on\nthe performance of the algorithms on three different metrics:\nthe network lifetime, the energy consumption rate, which is\nthe ratio of the total energy consumed in the network to the\nnetwork lifetime, and the total variation distance after the\nsimulation run, which is the statistical distance [34] between\nthe distribution of node energies in the network at the end of\nthe simulation (i.e., when the first node dies) and the uniform\ndistribution of the total energy among the nodes in the network\nat the same time. The total variation distance serves as an\nindicator for the energy balance that each method achieves\nin the network. We keep the number of proxies close to the\nsmall number defined in the experimental parameters, and we\nuse a percentage of cache nodes of |P| = 0.2|V |, so as to also\nmaintain the modeling assumption of |P| ≪|V −P|. Also,\nwe adopt the same l(h), Lmax values as with the experiments.\nAdditionally, we can simulate higher energy supplies for each\nnode, something that was infeasible in the testbed, as the\ntestbed nodes had a specific fixed amount of energy stored in\ntheir batteries. So we set 30 −50 Wh per node and 100 −150\nWh per cache node, data piece generation and consumption\nrate rg\nd = rc\nd = 1 −8 d/sec. For DCA+ and PFR we set\nατ = 10 hours. The simulations were conducted in Matlab,\nand each value in the plots is the result of 500 runs of the same\nexperiment with random (within the aforementioned ranges)\ninitial energy supplies and generation/consumption rates. The\nstatistical analysis of the findings (the median, lower and\nupper quartiles, outliers of the samples) demonstrate very high\nconcentration around the mean, so in the following figures we\nonly depict average values.\nNetwork lifetime. We ran the three methods in networks\nof increasing number of consumers (cd = 5 −14) and for\nincreasing numbers of nodes, and we display the results in\nFigs. 6a-6d. For purposes of visual convenience, the y-axis of\nthe figures is presented in logarithmic scale. Also in each fig-\nure there is a magnified portion of the plot, displaying closely\nthe part of DCA and DCA+. We can see that for increasing\nnumber of nodes (with constant percentage of cache nodes in\nthe network), the performance trend follows a similar pattern\nfor all three methods. The conclusion is that even if both\nDCA+ and PFR outperform DCA, the performance gap exhibits\nsignificant variation. Specifically, DCA+ manages to prolong\nthe network lifetime at the best case for an order of magnitude\nof 1000 hours, PFR is prolonging the lifetime for an order\nof magnitude of 10000 hours. This remarkably significant\nimprovement comes from the fact that PFR is using only the\nlow-power edge wireless links which are typically operating\n\n\n11\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n101\n102\n103\n104\n105\n106\nNetwork lifetime (hours)\nDCA\nDCA+\nPFR\n7\n8\n9\n2000\n4000\n6000\n(a) 25 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n101\n102\n103\n104\n105\n106\nNetwork lifetime (hours)\nDCA\nDCA+\nPFR\n7\n8\n9\n2000\n3000\n4000\n5000\n(b) 36 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n101\n102\n103\n104\n105\n106\nNetwork lifetime (hours)\nDCA\nDCA+\nPFR\n7\n8\n9\n2000\n4000\n6000\n(c) 49 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n101\n102\n103\n104\n105\n106\nNetwork lifetime (hours)\nDCA\nDCA+\nPFR\n7\n8\n9\n2000\n3000\n4000\n5000\n(d) 64 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n1010\n1011\n1012\n1013\n1014\nEnergy consumption rate\nDCA\nDCA+\nPFR\n(e) 25 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n1010\n1011\n1012\n1013\n1014\nEnergy consumption rate\nDCA\nDCA+\nPFR\n(f) 36 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n1010\n1011\n1012\n1013\n1014\nEnergy consumption rate\nDCA\nDCA+\nPFR\n(g) 49 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n1010\n1011\n1012\n1013\n1014\nEnergy consumption rate\nDCA\nDCA+\nPFR\n(h) 64 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n82.75%\n82.80%\n82.85%\n82.90%\n82.95%\n83.00%\nTotal variation distance\nDCA\nDCA+\nPFR\n(i) 25 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n79.54%\n79.56%\n79.58%\n79.60%\n79.62%\n79.64%\n79.66%\n79.68%\n79.70%\n79.72%\n79.74%\nTotal variation distance\nDCA\nDCA+\nPFR\n(j) 36 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n84.15%\n84.20%\n84.25%\n84.30%\n84.35%\n84.40%\n84.45%\n84.50%\n84.55%\nTotal variation distance\nDCA\nDCA+\nPFR\n(k) 49 nodes.\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nNumber of consumers\n82.95%\n83.00%\n83.05%\n83.10%\n83.15%\n83.20%\n83.25%\nTotal variation distance\nDCA\nDCA+\nPFR\n(l) 64 nodes.\nFig. 6: Lifetime, energy consumption rate, total variation distance.\nat −25 dBm (without having the privilege of efficient central\nDCA recomputations), in contrast to DCA+ which is using\nalso local area wireless (and is acquiring updated efficient\nschedules based on the current energy map of the network),\ntypically at 15 dBm. Those values translate to power of 3 µW\nand 32 mW respectively, and therefore exhibit a difference of\nat least three orders of magnitude. Taking a look at the figures\nwith the performance results, we can empirically validate\nthis phenomenon, as the difference between the performance\nof PFR and DCA+, interestingly enough, exhibits indeed a\ndifference of 0-3 orders of magnitude.\nEnergy consumption rate. the energy consumption rate is\ndisplayed in Figs. 6e-6h. Again, the performance trend follows\na similar pattern for all three methods, in every instance of the\nexperiment. Specifically, while DCA+ manages to reduce the\nenergy consumption rate at the best case within the same order\nof magnitude, PFR is reducing the energy consumption rate\nfor up to 3 orders of magnitude (for example 1010 against 1013\nfor 14 consumers). This is a result of the local area wireless\ncommunications and is quite interesting, as it shows that the\nadvantage offered by DCA+, of recomputing dynamically the\nbest paths as time goes by, is basically nullified by the cost\nof additional reporting by field nodes towards the central con-\ntroller. On the contrary, PFR, achieves the significantly lower\nenergy consumption rate (0−3 orders of magnitude), thanks to\nthe data distribution path rotation throughout the experiment.\nConsidering together the results related to network lifetime and\nenergy rate consumption, we obtain a very interesting picture.\nSpecifically, a fully distributed algorithm like PFR provides a\nstriking advantage in terms of energy efficiency with respect\nto a centralized solution. Even though the paths used by PFR\nmight be suboptimal (as opposed to DCA+), the additional\ncost paid on those paths is way lower than the cost required\nby DCA+ to keep, at the central controller, an updated view\nof the energy status of each node. Such energy disadvantage\nof centralized solutions are, to the best of our knowledge,\nnot often highlighted. Together with issues such as additional\ndelays and jitter in communications, they also push towards\nmore decentralized solutions for data management, such as\nPFR.\nTotal variation distance. We use the total variation distance\nmetric [34] as an indicator of the energy balance in the net-\nwork. The energy balance achieved by a method is an indirect\neffect of this method on the network’s energy distribution.\nEnergy balance can be an important metric of industrial edge\ndeployments which can lead to prevention of uneven load or\nearly disconnections. Let R, Q be two probability distributions\ndefined on sample space V. The total variation distance\nδ(R, Q) between R and Q is δ(R, Q)\ndef\n=\n1\n2\nP\nx∈V |R(x) −\nQ(x)|. Equivalently, δ(R, Q) = P\nx∈V:R(x)>Q(x)(R(x) −\nQ(x)) = P\nx∈V:R(x)<Q(x)(Q(x) −R(x)). At the end of\neach experiment, we define the distribution E on the sample\n\n\n12\nspace of the network nodes V as E(u)\ndef\n=\nEu\nE(V), for any\nu ∈V, where E(V) = P\nx∈V Ex. Furthermore, we denote\nby U the uniform distribution on V. We will say that the\nnetwork achieves energy balance of value µ if and only if\nδ(E, U) ≤µ. The total variation distance of the three methods\nis displayed in Figs. 6i-6l. Since a better energy balance is\nexpressed by lower values of total variation distance, it is\napparent that eventually the best balance is achieved by DCA,\noutperforming PFR by a factor of 0.15−0.38%. For example,\nfor 49 network nodes, while PFR manages to achieve a total\nvariation distance of 84.5%, DCA+ is achieving 84.3% and\nDCA 84.2% (for 14 consumers). However, note that this is\na conclusion regarding only the energy balance, not taking\ninto account the lifetime achieved, which in the case of PFR\nwas significantly higher. Naturally, the longer the lifetime is,\nthe more the energy distribution in the population can variate,\nthus leading to wider variation distances. Also, since this\nis the maximal difference, the energy balance is almost the\nsame across the three methods, which is another advantage\nof PFR in the end. A final point to be made is the co-\nrelation of the results on the energy consumption rate and the\ntotal variation distance. As we can see in Figs. 6e-6h, PFR,\nachieves the significantly lower energy consumption rate than\nDCA and DCA+. However, this improvement comes at a cost:\nAs mentioned earlier (and shown in Figs. 6i-6l), PFR leads to\na less balanced energy consumption in the network.\nVI. CONCLUSIONS\nIn this paper, we introduced the problem of distributed data\naccess in multi-hop wireless industrial edge deployments and\nwe prove that it is computationally intractable. We designed\na two-step algorithm for solving the computation version of\nthe problem, and we used FIT IoT-LAB open testbed [20] for\nconducting the experimental investigation. We provided two\nonline improvements to recompute paths dynamically based\non updated values of energy at nodes. The first one is a\ncentralized method which uses local area wireless commu-\nnication to renew the data distribution schedules according\nto the current network energy map and the second one is\na distributed method which periodically rotates the available\ndata distribution paths in a proportionally fair manner. We\ncompared the performance of all three methods via sim-\nulations for different numbers of network nodes and data\nconsumers, and we showed significant lifetime prolongation\nand increased energy efficiency when using the proportionally\nfair rotation method. We believe that these results provide one\nmore dimension supporting the advantage of distributed data\nmanagement schemes over centralized ones. In addition to the\nwell-known advantage of lower delays and jitter, which are\nvery important in industrial environments, we also show that\ndistributed solutions can be dramatically more energy efficient,\nas they can rely almost exclusively on cheap local wireless\ncommunication technologies, avoiding more costly local area\nwireless networks, required to quickly communicate with\ncentral controllers. Finally, end-users with potential related\nnecessities in actual industrial environments and shop-floors\ncan adopt our solution per se, and obtain similar approximate\nresults. Also, given that the evaluation results show that the\nperformance of the solution is stable for the specific types\nof networks presented in this paper, our algorithmic design\nmethodology can be reused for addressing similar future\nemerging problems in different application scenaria.\nREFERENCES\n[1] M.\nConti,\nS.\nK.\nDas,\nC.\nBisdikian,\nM.\nKumar,\nL.\nM.\nNi,\nA. Passarella, G. Roussos, G. Tr¨oster, G. Tsudik, and F. Zambonelli,\n“Looking ahead in pervasive computing: Challenges and opportunities\nin the era of cyber-physical convergence,” Pervasive and Mobile\nComputing, vol. 8, no. 1, pp. 2 – 21, 2012. [Online]. Available:\nhttp://www.sciencedirect.com/science/article/pii/S1574119211001271\n[2] X. Xu and Q. Hua, “Industrial Big Data Analysis in Smart Factory:\nCurrent Status and Research Strategies,” IEEE Access, vol. 5, pp.\n17 543–17 551, 2017.\n[3] J. Yan, Y. Meng, L. Lu, and L. Li, “Industrial Big Data in an Industry\n4.0 Environment: Challenges, Schemes, and Applications for Predictive\nMaintenance,” IEEE Access, vol. 5, pp. 23 484–23 491, 2017.\n[4] “NetWorld2020: Smart Networks in the context of NGI - Strategic Re-\nsearch and Innovation Agenda 2021-27,” https://www.networld2020.eu/\nwp-content/uploads/2018/11/networld2020-5gia-sria-version-2.0.pdf,\naccessed on 1 July 2019.\n[5] L. Ascorti, S. Savazzi, G. Soatti, M. Nicoli, E. Sisinni, and S. Galimberti,\n“A wireless cloud network platform for industrial process automation:\nCritical data publishing and distributed sensing,” IEEE Transactions on\nInstrumentation and Measurement, vol. 66, no. 4, pp. 592–603, April\n2017.\n[6] J. Fu, Y. Liu, H. Chao, B. K. Bhargava, and Z. Zhang, “Secure Data\nStorage and Searching for Industrial IoT by Integrating Fog Computing\nand Cloud Computing,” IEEE Transactions on Industrial Informatics,\nvol. 14, no. 10, pp. 4519–4528, Oct 2018.\n[7] M. Bennis, M. Debbah, and H. V. Poor, “Ultrareliable and low-latency\nwireless communication: Tail, risk, and scale,” Proceedings of the IEEE,\nvol. 106, no. 10, pp. 1834–1853, Oct 2018.\n[8] “5GPPP: 5G and the Factories of the Future,” https://5g-ppp.eu/, ac-\ncessed on 1 July 2019.\n[9] T. Raptis, A. Passarella, and M. Conti, “Performance Analysis\nof Latency-Aware Data Management in Industrial IoT Networks,”\nSensors, vol. 18, no. 8, p. 2611, Aug 2018. [Online]. Available:\nhttp://dx.doi.org/10.3390/s18082611\n[10] M. Lucas-Estan, M. Sepulcre, T. Raptis, A. Passarella, and M. Conti,\n“Emerging Trends in Hybrid Wireless Communication and Data\nManagement for the Industry 4.0,” Electronics, vol. 7, no. 12, p. 400, Dec\n2018. [Online]. Available: http://dx.doi.org/10.3390/electronics7120400\n[11] K. Wang, Y. Wang, Y. Sun, S. Guo, and J. Wu, “Green Industrial\nInternet of Things Architecture: An Energy-Efficient Perspective,” IEEE\nCommunications Magazine, vol. 54, no. 12, pp. 48–54, December 2016.\n[12] S. Even, A. Itai, and A. Shamir, “On the complexity of time table\nand multi-commodity flow problems,” in 16th Annual Symposium on\nFoundations of Computer Science (sfcs 1975), Oct 1975, pp. 184–193.\n[13] L. Mottola and G. P. Picco, “MUSTER: Adaptive Energy-Aware Mul-\ntisink Routing in Wireless Sensor Networks,” IEEE Transactions on\nMobile Computing, vol. 10, no. 12, pp. 1694–1709, Dec 2011.\n[14] M. Magno, D. Boyle, D. Brunelli, E. Popovici, and L. Benini, “Ensuring\nSurvivability of Resource-Intensive Sensor Networks Through Ultra-\nLow Power Overlays,” IEEE Transactions on Industrial Informatics,\nvol. 10, no. 2, pp. 946–956, May 2014.\n[15] B. Chen, L. Liu, Z. Zhang, W. Yang, and H. Ma, “BRR-CVR: A\nCollaborative Caching Strategy for Information-Centric Wireless Sensor\nNetworks,” in 2016 12th International Conference on Mobile Ad-Hoc\nand Sensor Networks (MSN), Dec 2016, pp. 31–38.\n[16] M. J. Herrmann and G. G. Messier, “Cross-layer lifetime optimization\nfor practical industrial wireless networks: A petroleum refinery case\nstudy,” IEEE Transactions on Industrial Informatics, vol. 14, no. 8, pp.\n3559–3566, Aug 2018.\n[17] A. Saifullah, Y. Xu, C. Lu, and Y. Chen, “End-to-end communication\ndelay analysis in industrial wireless networks,” IEEE Transactions on\nComputers, vol. 64, no. 5, pp. 1361–1374, May 2015.\n[18] T. P. Raptis, A. Passarella, and M. Conti, “Data Management in Industry\n4.0: State of the Art and Open Challenges,” IEEE Access, vol. 7, pp.\n97 052–97 093, 2019.\n[19] ——, “Maximizing industrial IoT network lifetime under latency con-\nstraints through edge data distribution,” in 2018 IEEE Industrial Cyber-\nPhysical Systems (ICPS), May 2018, pp. 708–713.\n\n\n13\n[20] C. Adjih, E. Baccelli, E. Fleury, G. Harter, N. Mitton, T. Noel,\nR. Pissard-Gibollet, F. Saint-Marcel, G. Schreiner, J. Vandaele, and\nT. Watteyne, “FIT IoT-LAB: A large scale open experimental IoT\ntestbed,” in 2015 IEEE 2nd World Forum on Internet of Things (WF-\nIoT), Dec 2015, pp. 459–464.\n[21] Y. Luo, Y. Duan, W. Li, P. Pace, and G. Fortino, “A novel mobile and\nhierarchical data transmission architecture for smart factories,” IEEE\nTransactions on Industrial Informatics, vol. 14, no. 8, pp. 3534–3546,\nAug 2018.\n[22] ——, “Workshop networks integration using mobile intelligence in smart\nfactories,” IEEE Communications Magazine, vol. 56, no. 2, pp. 68–75,\nFeb 2018.\n[23] A. Willig, K. Matheus, and A. Wolisz, “Wireless technology in industrial\nnetworks,” Proceedings of the IEEE, vol. 93, no. 6, pp. 1130–1151, June\n2005.\n[24] “Network-based communication for Industrie 4.0,” Publications of Plat-\ntform Industrie 4.0, www.plattform-i40.de, 2016, accessed: 14-11-2017.\n[25] A. M¨uller, “Contribution to the discussion session on ”Radio communi-\ncation for Industrie 4.0”,” on May, 28th, 2015 at the ITG-expert comittee\n7.2 radio systems, 2015.\n[26] G. Anastasi, M. Conti, M. D. Francesco, and A. Passarella, “Energy\nconservation\nin\nwireless\nsensor\nnetworks:\nA\nsurvey,”\nAd\nHoc\nNetworks, vol. 7, no. 3, pp. 537 – 568, 2009. [Online]. Available:\nhttp://www.sciencedirect.com/science/article/pii/S1570870508000954\n[27] M. R. Garey and D. S. Johnson, Computers and Intractability: A Guide\nto the Theory of NP-Completeness.\nW. H. Freeman & Co., 1979.\n[28] J.-H. Chang and L. Tassiulas, “Maximum lifetime routing in wireless\nsensor networks,” IEEE/ACM Transactions on Networking, vol. 12,\nno. 4, pp. 609–619, Aug 2004.\n[29] V. Shah-Mansouri, A. H. Mohsenian-Rad, and V. W. S. Wong, “Lexico-\ngraphically optimal routing for wireless sensor networks with multiple\nsinks,” IEEE Transactions on Vehicular Technology, vol. 58, no. 3, pp.\n1490–1500, March 2009.\n[30] D. Eppstein, “Finding the k Shortest Paths,” SIAM Journal on\nComputing, vol. 28, no. 2, pp. 652–673, 1998. [Online]. Available:\nhttps://doi.org/10.1137/S0097539795290477\n[31] J. Y. Yen, “Finding the K Shortest Loopless Paths in a Network,”\nManagement Science, vol. 17, no. 11, pp. 712–716, 1971. [Online].\nAvailable: http://www.jstor.org/stable/2629312\n[32] “CC2420 datasheet,” http://www.ti.com/lit/ds/symlink/cc2420.pdf, ac-\ncessed: 01-07-2019.\n[33] “LM820 datasheet,” https://www.lm-technologies.com/lm downloads/\nLM820 DATASHEET.pdf, accessed: 01-07-2019.\n[34] D. A. Levin, Y. Peres, and E. L. Wilmer, Markov chains and mixing\ntimes.\nAmerican Mathematical Society, 2006.\nTheofanis P. Raptis is a Research Scientist at the\nNational Research Council of Italy. Previously, he\nwas an Associate Researcher at the Computer Tech-\nnology Institute and Press “Diophantus”, Greece.\nHe has published in journals, conference proceed-\nings and books more than 60 papers on industrial\nnetworks, wirelessly powered networks, internet of\nthings testbeds and platforms. He is serving as\nAssociate Editor for the IEEE Access journal and\nas Guest Editor for the Elsevier Computer Commu-\nnications journal. He is regularly involved in inter-\nnational IEEE and ACM sponsored conference and workshop organization\ncommittees, in the areas of networks, computing and communications. He\nobtained his PhD at the University of Patras, Greece.\nAndrea Passarella (PhD 2005) is a Research Di-\nrector at the Institute for Informatics and Telematics\n(IIT) of the National Research Council of Italy\n(CNR). Prior to join IIT he was with the Computer\nLaboratory of the University of Cambridge, UK. He\nhas published 160+ papers on human-centric data\nmanagement for self-organising networks, online\nand mobile social networks, opportunistic, ad hoc\nand sensor networks. He received four best paper\nawards, including at IFIP Networking 2011 and\nIEEE WoWMoM 2013. He was General Co-Chair\nfor IEEE WoWMoM 2019 and workshops co-chair for IEEE INFOCOM 2019.\nHe was the PC co-chair of IEEE WoWMoM 2011, Workshops co-chair of\nACM MobiHoc 2015, IEEE PerCom and WoWMoM 2010, and the co-chair\nof several IEEE and ACM workshops. He is the founding Associate EiC of the\nnew Elsevier journal Online Social Networks and Media (OSNEM). He is co-\nauthor of the book “Online Social Networks: Human Cognitive Constraints in\nFacebook and Twitter Personal Graphs” (Elsevier, 2015), and was Guest Co-\nEditor of the several special issues/sections in ACM and Elsevier Journals and\nof the book “Multi-hop Ad hoc Networks: From Theory to Reality” (2007). He\nis the chair of the IFIP WG 6.3 “Performance of Communication Systems”.\nMarco Conti is a Research Director and Scientific\nCounselor, for information and communication tech-\nnologies, of the Italian National Research Council.\nHe has published in journals and conference pro-\nceedings more than 400 scientific papers related to\ndesign, modeling, and experimentation of Internet\narchitecture and protocols, pervasive systems and\nsocial networks. He is the founding Editor-in-Chief\nof the Online Social Networks and Media journal,\nEditor-in-Chief for special issues of the Pervasive\nand Mobile Computing journal and, from several\nyears, Editor-in-Chief of the Computer Communications journal, all published\nby Elsevier. He has published the books “Metropolitan Area Networks\n(MANs)” (1997), “Mobile Ad Hoc Networking” (2004), “Mobile Ad hoc net-\nworking: the cutting edge technologies” (2013) and “Online Social Networks:\nHuman Cognitive Constraints in Facebook and Twitter Personal Graphs”\n(2015). He has received several awards, including the Best Paper Award at\nIFIP TC6 Networking 2011, IEEE ISCC 2012 and IEEE WoWMoM 2013. He\nserved as TPC chair for several major conferences, such as IFIP Networking\n2002, IEEE WoWMoM 2005, IEEE PerCom 2006, and ACM MobiHoc 2006,\nand he was general chair (among many others) for IEEE WoWMoM 2006,\nIEEE MASS 2007 and IEEE PerCom 2010. He is the founder of successful\nconference and workshop series, such as IEEE AOC, ACM MobiOpp, and\nIFIP SustainIT.\n\n\n",
  "metadata": {
    "source_file": "dataset/pdfs/arxiv_2502.21117v1.pdf",
    "total_pages": 13,
    "title": "Distributed Data Access in Industrial Edge Networks",
    "authors": [
      "Theofanis P. Raptis",
      "Andrea Passarella",
      "Marco Conti"
    ],
    "abstract": "Wireless edge networks in smart industrial environments increasingly operate\nusing advanced sensors and autonomous machines interacting with each other and\ngenerating huge amounts of data. Those huge amounts of data are bound to make\ndata management (e.g., for processing, storing, computing) a big challenge.\nCurrent data management approaches, relying primarily on centralized data\nstorage, might not be able to cope with the scalability and real time\nrequirements of Industry 4.0 environments, while distributed solutions are\nincreasingly being explored. In this paper, we introduce the problem of\ndistributed data access in multi-hop wireless industrial edge deployments,\nwhereby a set of consumer nodes needs to access data stored in a set of data\ncache nodes, satisfying the industrial data access delay requirements and at\nthe same time maximizing the network lifetime. We prove that the introduced\nproblem is computationally intractable and, after formulating the objective\nfunction, we design a two-step algorithm in order to address it. We use an open\ntestbed with real devices for conducting an experimental investigation on the\nperformance of the algorithm. Then, we provide two online improvements, so that\nthe data distribution can dynamically change before the first node in the\nnetwork runs out of energy. We compare the performance of the methods via\nsimulations for different numbers of network nodes and data consumers, and we\nshow significant lifetime prolongation and increased energy efficiency when\nemploying the method which is using only decentralized low-power wireless\ncommunication instead of the method which is using also centralized local area\nwireless communication.",
    "published_date": "2025-02-28",
    "source": "arxiv"
  }
}